# Starting off with OpenSSL workflow file: We need to build OpenSSL too...

name: Windows tests

on: [pull_request, push]

permissions:
  contents: read

jobs:
  cygwin:
# Run a job for each of the specified target architectures:
    strategy:
      matrix:
        os:
          - windows-2019
#          - windows-2022
        platform:
          - arch: win64
            oqsconfig: -DOQS_ALGS_ENABLED=STD
#          - arch: win32
#            config: --strict-warnings no-fips enable-quic
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/checkout@v3
        with:
          set-safe-directory: true
          repository: openssl/openssl
          path: openssl
      - uses: actions/checkout@v3
        with:
          set-safe-directory: true
          repository: open-quantum-safe/liboqs
          ref: main
          path: liboqs
      - uses: cygwin/cygwin-install-action@master
        with:
          packages: perl git ninja gcc-core cmake
      - name: Output PWD
        run: echo "PWD = $(pwd)" && ls && echo "PATH=$PATH"
      - name: Output PWD and HOME
        run: echo "PWD = $PWD" && echo "HOME=$HOME"
      - name: Output PWD (bash)
        run: bash -c "echo 'PWD = $(pwd)' && ls && echo 'PATH=$PATH'"
      - name: convert PWD (bash)
        run: bash -c "echo $(cygpath -u '$PWD')"
      - name: output path (win style)
        run: echo "PATH=%PATH%"
      - name: check bash
        run: which bash
# PATH= empty ?????
# OQS_USE_OPENSSL=OFF by default on Win32
      - name: build liboqs
# fails:        run: bash -o igncr -c "cmake -GNinja -DCMAKE_INSTALL_PREFIX=$(cygpath -u '$PWD')/../.local ${{ matrix.platform.oqsconfig }} -DCMAKE_C_COMPILER=gcc -S $(cygpath -u '$PWD') -B $(cygpath -u '$PWD')/_build && cmake --build _build --parallel && cmake --install _build"
# also fails: cmake --debug-output -GNinja -DCMAKE_INSTALL_PREFIX=$(cygpath -u '$PWD')/../.local -DOQS_ALGS_ENABLED=STD -DCMAKE_C_COMPILER=gcc -S $(cygpath -u '$PWD') -B _build
        run: |
           which cmake
           cmake --version
           echo "pwd=$(pwd)"
           echo "pwd=$(cygpath -u '$PWD')"
           gcc --version
           mkdir _build
           cd _build
           cmake --debug-output -GNinja -DCMAKE_INSTALL_PREFIX=$(cygpath -u $PWD)/../.local ${{ matrix.platform.oqsconfig }} -DCMAKE_C_COMPILER=gcc ..
           ninja
           ninja install
        working-directory: liboqs
      - name: build openssl3
        run: bash -o igncr -c "ls && ./config --prefix=$(echo $(cygpath -u '$PWD')/../.local) && make -j 4 && make install_sw"
        working-directory: openssl
      - name: build oqs-provider
        run: bash -o igncr -c "liboqs_DIR=.local cmake -GNinja -DCMAKE_C_COMPILER=gcc -DOPENSSL_ROOT_DIR=$(cygpath -u '$PWD')/.local -S . -B _build && cmake --build _build --parallel "
      - name: Run tests
        run: bash -o igncr -c "ctest --test-dir _build"
  msvc:
# Run a job for each of the specified target architectures:
    strategy:
      matrix:
        os:
          - windows-2019
#          - windows-2022
        platform:
          - arch: win64
            oqsconfig: -DOQS_ALGS_ENABLED=STD
            osslconfig: no-shared no-fips VC-WIN64A-masm
#          - arch: win32
#            config: --strict-warnings no-fips enable-quic
    runs-on: ${{matrix.os}}
    steps:
      - name: Cache OpenSSL32
        id: cache-openssl32
        uses: actions/cache@v3
        with:
          path: c:\openssl32
          key: ${{ runner.os }}-openssl32
      - uses: actions/checkout@v3
      - name: Checkout OpenSSL master
        if: steps.cache-openssl32.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          set-safe-directory: true
          repository: openssl/openssl
          path: openssl
      - uses: actions/checkout@v3
        with:
          set-safe-directory: true
          repository: open-quantum-safe/liboqs
          path: liboqs
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.platform.arch }}
      - name: Setup nasm for OpenSSL build
        uses: ilammy/setup-nasm@v1
        if: steps.cache-openssl32.outputs.cache-hit != 'true'
        with:
          platform: ${{ matrix.platform.arch }}
      - name: Setup perl for OpenSSl build
        uses: shogo82148/actions-setup-perl@v1
        if: steps.cache-openssl32.outputs.cache-hit != 'true'
      - name: Control setup
        run: |
          dir
          pwd
# OQS_USE_OPENSSL=OFF by default on Win32
# if cmake --build fails, try explicit
# cd _build && msbuild ALL_BUILD.vcxproj -p:Configuration=Release
# fails:          cmake -DCMAKE_C_FLAGS="/wd5105" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX="c:\liboqs" ${{ matrix.platform.oqsconfig }} -S . -B _build
#          cd _build && msbuild ALL_BUILD.vcxproj -p:Configuration=Release && cd ..
#          cmake --install _build
      - name: build liboqs
        run: |
          cmake --version
          mkdir build
          cd build
          cmake -GNinja -DCMAKE_C_FLAGS="/wd5105" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX="c:\liboqs" ${{ matrix.platform.oqsconfig }} -DOQS_DIST_BUILD=ON ..
          ninja
          ninja install
        working-directory: liboqs
      - name: prepare the OpenSSL build directory
        if: steps.cache-openssl32.outputs.cache-hit != 'true'
        run: mkdir _build
        working-directory: openssl
      - name: OpenSSL config
        if: steps.cache-openssl32.outputs.cache-hit != 'true'
        working-directory: openssl\_build
        run: |
          perl ..\Configure --banner=Configured --prefix=. no-makedepend ${{ matrix.platform.osslconfig }}
          perl configdata.pm --dump
      - name: OpenSSL build
        if: steps.cache-openssl32.outputs.cache-hit != 'true'
        working-directory: openssl\_build
        run: nmake /S
# Skip testing openssl for now
#      - name: test
#        working-directory: openssl\_build
#        run: nmake test VERBOSE_FAILURE=yes TESTS=-test_fuzz* HARNESS_JOBS=4
      - name: OpenSSL install
        # Run on 64 bit only as 32 bit is slow enough already
        if: steps.cache-openssl32.outputs.cache-hit != 'true'
        run: |
          mkdir c:\openssl32
          nmake install_sw DESTDIR=c:\openssl32
        working-directory: openssl\_build
      - name: Save OpenSSL
        id: cache-openssl-save
        if: steps.cache-openssl32.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            c:\openssl32
          key: ${{ runner.os }}-openssl32
      - name: build oqs-provider
        run: |
          cmake -DOPENSSL_ROOT_DIR=c:\openssl32 -Dliboqs_DIR="c:\liboqs" ${{ matrix.platform.oqsconfig }} -S . -B _build
          cmake --build _build --parallel
      - name: Run tests
        run: |
          ctest --test-dir _build

